from airflow.models import DAGfrom airflow.operators.python import PythonOperatorfrom airflow.utils.trigger_rule import TriggerRuleimport pendulumdag = DAG(    'aaa_dag',    schedule_interval='@daily',    start_date=pendulum.today('UTC').add(days=-1),    catchup=False)def p1_task():    print("Executing p1_task")def p2_task():    print("Executing p2_task")    #raise ValueError("Simulating failure in p2_task") def p3_task():    print("Executing p3_task")    #raise ValueError("Simulating failure in p3_task") def p4_task():    print("Executing p4_task")def skip_p3(context):    from airflow.models import TaskInstance    ti = context['task_instance']    if ti.state == 'failed':        ti.state = 'skipped'p1 = PythonOperator(task_id='p1', python_callable=p1_task, dag=dag)p2 = PythonOperator(task_id='p2', python_callable=p2_task, dag=dag)p3 = PythonOperator(task_id='p3', python_callable=p3_task, dag=dag, on_failure_callback=skip_p3)p4 = PythonOperator(task_id='p4', python_callable=p4_task, dag=dag, trigger_rule=TriggerRule.NONE_FAILED)p1 >> [p2, p3]p2 >> p4p3 >> p4