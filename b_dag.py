from datetime import datetime, timedeltaimport pendulumfrom airflow import DAGfrom airflow.operators.bash import BashOperatorfrom airflow.operators.python import BranchPythonOperatorfrom airflow.operators.empty import EmptyOperatorfrom airflow.utils.trigger_rule import TriggerRuledefault_args = {    'owner': 'airflow',    'depends_on_past': False,    'email_on_failure': False,    'email_on_retry': False,}def mark_success_callable(context):    context['ti'].xcom_push(key='p2_success', value=True)def should_run_p4(**kwargs):    ti = kwargs['ti']    p2_success = ti.xcom_pull(key='p2_success', task_ids='p2', default=False)    print(f"Pulled p2_success: {p2_success}")    return 'p4' if p2_success else 'end'with DAG(    dag_id='b_dag',    default_args=default_args,    description='An example DAG demonstrating trigger rules',    schedule='@daily',    start_date=pendulum.today('UTC').add(days=-1),    catchup=False,) as dag:    p1 = BashOperator(        task_id='p1',        bash_command='echo "Executing p1"',    )    p2 = BashOperator(        task_id='p2',                bash_command='exit 1',        on_success_callback=mark_success_callable,    )    p3 = BashOperator(        task_id='p3',        bash_command='echo "Executing p3"',           )    branch_task = BranchPythonOperator(        task_id='branch_task',        python_callable=should_run_p4,        trigger_rule=TriggerRule.ONE_SUCCESS,    )    p4 = BashOperator(        task_id='p4',        bash_command='echo "Executing p4"',    )    end = EmptyOperator(        task_id='end'    )    p1 >> [p2, p3] >> branch_task    branch_task >> [p4, end]